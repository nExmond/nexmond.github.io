I"<p>iOS 개발자로서 협업을 하다보면, iOS의 특징에 대해 설명해야 할 때가 있습니다.</p>

<p>소규모의 스타트업의 경우 iOS와 안드로이드를 한 디자인으로 개발하는 경우가 많습니다. 그러다 보면 어떤 플랫폼을 위한 인터페이스인지 알 수 없게 되고, 각 플랫폼이 추구하는 방향과는 거리가 멀어집니다. 예를 들어 안드로이드 형태의 디자인을 가진 iOS앱을 들 수 있습니다.  안드로이드 디자인을 따라가는 iOS 앱의 이질감은 어쩔 수가 없습니다.</p>

<p>이런 이질감을 개선하기 위해 iOS앱 디자인의 방향을 제시하고 개선해야 하는데, 이럴 때 애플의 <strong>Human Interface Guidelines (HIG)</strong>를 알고 있다면 큰 도움이 될 것입니다.</p>

<p>애플은 맥, 아이패드, 아이폰 등 각각의 환경에서 사용자 경험을 일관적으로 유지시키기 위해, 개발자와 디자이너가 앱을 제작할 때 지켜야 할 지침인 HIG를 제공하고 있습니다.</p>

<p>HIG에서 iOS가 어떤 것을 추구하는 지, 어떤 요소들로 이루어져 있는지 등. iOS를 개발하기 위해 필요한 사전 지식을 얻을 수 있습니다.</p>

<p>오늘은 HIG에서 소개하는 iOS에 대해 간략하게 설명하려고 합니다.</p>

<p>다소 생략되어 있는 부분이 있을 수 있고, 주관적인 해석이 있을 수 있습니다.</p>

<h2 id="ios를-ios답게-하는-주요-테마-3가지">iOS를 iOS답게 하는 주요 테마 3가지</h2>

<p>iOS를 몇 단어로 표현해야 한다면, 아래 3가지를 들 수 있습니다.</p>

<h3 id="1-직관적">1. 직관적</h3>

<p>화면을 구성하는 각각의 요소가 의식하지 않아도 의미를 명확하게 전달합니다.</p>

<h3 id="2-존중">2. 존중</h3>

<p>억지로 이해하려고 씨름하지 않아도 내용을 이해할 수 있게 사용자를 배려합니다.</p>

<h3 id="3-깊이">3. 깊이</h3>

<p>뚜렷한 깊이감과 현실적인 움직임은 깊이에 대한 이해를 돕고, 추가 컨텐츠에 접근할 수 있도록 돕습니다.</p>

<p><strong>사용자가 앱 사용을 쉽게 이해할 수 있도록 돕는 것이 주를 이루고 있습니다.</strong></p>

<h2 id="앱의-잠재력을-극대화-하는-디자인-원칙-6가지">앱의 잠재력을 극대화 하는 디자인 원칙 6가지</h2>

<p>아래의 원칙을 잘 따른다면, 인기 앱 반열에 오르는 것은 시간 문제입니다.</p>

<h3 id="1-심미적-무결성">1. 심미적 무결성</h3>

<p>모양과 동작이 기능과 일치하는 것이 좋습니다.</p>

<h3 id="2-일관성">2. 일관성</h3>

<p>어느 곳에서나 사용하는 통일된 모양 또는 글꼴로 표현하여, 사용자가 기대하는 방식으로 표현하는 것이 좋습니다.</p>

<h3 id="3-직접-조작">3. 직접 조작</h3>

<p>사용자의 이해를 돕기 위해 컨텐츠를 직접 조작하게 하여 참여를 유도 하는 것이 좋습니다.</p>

<h3 id="4-피드백">4. 피드백</h3>

<p>사용자의 행동에 따른 반응으로 시각 효과, 소리, 진동 등의 피드백을 제공하는 것이 좋습니다.</p>

<h3 id="5-은유">5. 은유</h3>

<p>현실 또는 가상에서의 경험을 바탕으로 쉽게 학습할 수 있도록 친숙한 요소를 이용하는 것이 좋습니다.</p>

<h3 id="6-사용자-컨트롤">6. 사용자 컨트롤</h3>

<p>앱은 제안 또는 경고할 수 있지만 최종 결정권은 사용자에게 넘겨주어 앱을 통제하고 있다고 느끼도록 하는 것이 좋습니다.</p>

<p><strong>사용자가 연속적인 앱 경험을 할 수 있도록 일관성을 유지하는 것이 중요하다고 합니다.</strong></p>

<hr />

<p>전 포스팅에서는 iOS의 핵심을 언급했습니다.</p>

<p>그렇다면 iOS의 테마를 실현하기 위해서는 어떤 것이 필요할까요?</p>

<p>사용자에게 컨텐츠를 보여 주거나 사용자가 상호작용 할 수 있게끔 하는 무언가가 필요합니다.</p>

<p>그것은 바로 모두 잘 알고 계신 프레임워크, UIKit입니다.</p>

<p>대부분의 iOS 앱은 UIKit의 구성 요소로 만들어 집니다.</p>

<p>UIKit은 iOS 앱 공통의 인터페이스 요소를 정의하는 프레임워크입니다. 쉽게 말하면 앱과 사용자를 연결하는 역할을 하는 기능들을 모아 놓은 것이라고 할 수 있습니다.</p>

<p>UIKit을 구성하는 요소는 크게 세 가지 범주로 나눌 수 있습니다.</p>

<h2 id="1-바-bars">1. 바 (Bars)</h2>

<p>주로 사용자가 앱을 여행하는 과정에서 현재 위치를 알려주는 역할을 수행합니다. 중요한 명령을 모아 놓기도 합니다.</p>

<p>UINavigationBar, UITabBar, UIToolbar, UISearchBar 가 있습니다.</p>

<h2 id="2-뷰-views">2. 뷰 (Views)</h2>

<p>텍스트, 그래픽 등 앱에 표시되는 기본 컨텐츠를 담는 영역입니다.</p>

<p>UIView, UIScrollView, UIStackView 등이 있습니다.</p>

<h2 id="3-컨트롤-controls">3. 컨트롤 (Controls)</h2>

<p>사용자가 조작할 수 있는 뷰의 한 종류입니다. 컨트롤을 통해서 앱을 통제하는 느낌을 받습니다.</p>

<p>UIButton, UISwitch, UITextView, UISlider 등이 있습니다.</p>

<p>UIKit은 그 외에도 사용자가 위의 요소들과 상호작용 할 수 있도록 보조하는 여러 기능을 포함하고 있습니다.</p>

<p>뷰에 제스쳐 기능 부여 등, 기능을 쉽게 사용할 수 있습니다.</p>

<p>UIKit은 iOS를 이루는 프레임워크 중 하나일 뿐입니다. UIKit을 기반으로 제공되는 다른 프레임워크와 결합하여 탄탄한 앱을 제작할 수 있습니다.</p>

<hr />

<p>스토리보드 기반으로 화면을 구성하다 보면, 여러 인터페이스 구성 요소를 살펴볼 수 있습니다.</p>

<p>UI 구성요소들을 자연스럽게 사용하고는 있었지만, 어떤 기준으로 분류되어 있는 지 까지는 알지 못했습니다.</p>

<p>저만의 기준으로 분류를 하다보니 적재적소에 사용하지 못할 때가 있었는데, 이제는 명확한 목적을 가지고 사용할 수 있을 것 같습니다.</p>

<p><strong>참고</strong>: <a href="https://developer.apple.com/design/human-interface-guidelines/ios/overview/interface-essentials/">Human Interface Guidelines: iOS</a></p>
:ET